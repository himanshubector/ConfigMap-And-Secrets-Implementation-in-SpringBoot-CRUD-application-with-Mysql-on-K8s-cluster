

**************  ConfigMap & Secrets Implementation in Spring Boot CRUD with Mysql on K8s cluster Example  **************


https://www.youtube.com/watch?v=I1OcFX6_09c&list=PLVz2XdJiJQxybsyOxK7WFtteH42ayn5i9&index=10




We should always keep the data source properties related sensitive information(present in app-deployment.yaml file) outside of the application in the encrypted format.


Since we are using containerisation platform, K8s provides us with 2 components to store these kind of values ->


ConfigMap and Secret both are present outside of the Pods.


So, within a Node, all the pods can access to that particular ConfigMap and Secret.

ConfigMap stores information as plain text with key-value pair format.

Secret stores information as encrypted text.



We will keep DB username and DB password inside Secret since they need to be encrypted.

DB host and DB name we will keep inside ConfigMap since they both are not sensitive information, so we can store them as plain text.


Now, we need to create 2 more YAML files - one for ConfigMap and one for the Secret.



There is a way in K8s to encrypt the text â€”>>

echo -n 'root' | base64




====

minikube start



eval $(minikube docker-env)



Dockerize springboot application by navigating to the path -

cd /Users/himanshubector/Downloads/Microservices\ HandsOn\ April\ 2023/springboot-crud-k8s-example



Create the docker image

docker build -t springboot-crud-k8s-secret:1.0 .



Verify through command -

docker images




Apply mysql-configMap.yaml ->

kubectl apply -f mysql-configMap.yaml




Verify through command ->

kubectl get configmap




Apply mysql-secrets.yaml ->

kubectl apply -f mysql-secrets.yaml




Verify through command ->

kubectl get secrets




Apply db-deployment.yaml file ->

kubectl apply -f db-deployment.yaml



Verify using command ->

kubectl get deployment

kubectl get pods

kubectl logs <pod_name>

kubectl describe pod <pod_name>



In new terminal tab,  execute the command ->

kubectl exec -it mysql-8485ddcd57-8xxzp -- /bin/bash

mysql -u root -p






Apply app-deployment.yaml file ->

kubectl apply -f app-deployment.yaml



Verify using command ->

kubectl get deployments

kubectl get svc

kubectl get pods





 To get node ip / url,

minikube ip  OR  kubectl get svc


OR

minikube service <service_name> --url



O/p ->    http://127.0.0.1:63590



In postman,  have the Post request with following request body as -

http://127.0.0.1:63590/orders


Request body in json format -

{
    "name":"shoes",
    "qty":1,
    "price":5995

}


------------------------------------
------------------------------------



minikube service list


// The minikube service list command is used to list the services that are currently exposed in a local Kubernetes cluster created using Minikube.

When you run this command, Minikube displays a list of services that are running in the cluster, along with their type, cluster IP, external IP, and port number. This command can be useful when you want to access a service running in the Minikube cluster from your local machine or when you want to find out which services are currently available in the cluster.

By default, Kubernetes services are only accessible from within the cluster, which means that they can only be accessed by other pods running in the same cluster. However, you can use the minikube service command to expose a service to the outside world, which allows you to access the service from your local machine.

For example, you can use the minikube service command to expose a web application running in the cluster and access it from your web browser. The minikube service list command can be used to verify that the service is running and to find out the external IP and port number that you can use to access the service.





kubectl get rs

// The kubectl get rs command is used to retrieve information about the ReplicaSets (RS) that exist within the currently active Kubernetes cluster.
Specifically, kubectl get rs will list all the ReplicaSets in the default namespace. ReplicaSets are responsible for maintaining a specified number of replicas of pods, ensuring that the desired state of the application is always maintained.

The output of the kubectl get rs command includes information such as the name of each ReplicaSet, the number of desired replicas, the number of currently available replicas, and the age of the ReplicaSet.




