
# Define a 'Persistent Volume Claim'(PVC) for Mysql Storage, dynamically provisioned by cluster

apiVersion: v1

kind: PersistentVolumeClaim  # This k8s component will tell the Kubernetes to get the storage for running Mysql DB instance

metadata:
  name: mysql-pv-claim      # name of PVC essential for identifying the storage data

  labels:
    app: mysql
    tier: database

spec:
  accessModes:
    - ReadWriteOnce       # This specifies the mode of the claim that we are trying to create.

  resources:
    requests:
      storage: 1Gi       # This will tell kubernetes about the amount of space we are trying to claim.
---


# Configure 'Deployment' of mysql server
apiVersion: apps/v1

kind: Deployment

metadata:
  name: mysql
  labels:
    app: mysql
    tier: database

spec:
  selector:           # mysql Pod Should contain same labels
    matchLabels:
      app: mysql     # The selector name here should be same as that of service selector
      tier: database

  strategy:
    type: Recreate

  template:
    metadata:
      labels:                       # Must match 'Service' and 'Deployment' selectors
        app: mysql                  # The selector name here should be same as that of service selector
        tier: database
    spec:
      containers:
        - image: mysql:latest                        # Image from docker-hub
#          args:
#            - "--ignore-db-dir=lost+found"        # Workaround for https://github.com/docker-library/mysql/issues/186
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD         # mysql username is also 'root' for mysql db instance running inside the k8s pod
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: password

            - name: MYSQL_DATABASE    # Setting Database Name from a 'ConfigMap'
              valueFrom:
                configMapKeyRef:
                  name: mysqldb-config
                  key: dbName

          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:                        # Mounting volume obtained from Persistent Volume Claim
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql       # This is the path in the container on which the mounting will take place.
              subPath: mysql                  # The 'CrashLoopBackOff' error was related to the mountPath and subPath values which was fixed by giving their value like this


              # One common cause of this error when using a mountPath and subPath is that the directory specified by the subPath may not exist in the volume mounted at the mountPath. When using a subPath, Kubernetes expects the directory to already exist in the volume.
              # To resolve this issue, you can try creating the directory specified by the subPath on the persistent volume manually. You can do this by running the following command on the node where the Pod is scheduled:
              # mkdir -p /path/to/persistent/volume/mysql-data


      volumes:
        - name: mysql-persistent-storage     # Obtaining 'volume' from PVC
          persistentVolumeClaim:
            claimName: mysql-pv-claim


---
# Define a 'Service' To Expose mysql to Other Services
apiVersion: v1

kind: Service

metadata:
  name: mysql            # DNS name
  labels:
    app: mysql
    tier: database

spec:
  ports:
    - port: 3306
      targetPort: 3306

  selector:              # mysql Pod Should contain same labels
    app: mysql           # The selector name here should be same as that of deployment selector
    tier: database

  clusterIP: None       # We Use DNS, Thus ClusterIP is not relevant

